apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

//apply from: 'jacoco.gradle'
apply plugin: 'jacoco'

//apply plugin: 'jacoco' //code coverageb g

repositories {
    mavenLocal()
    mavenCentral()
}

jacoco {
    toolVersion = "0.7.9+"
    reportsDir = file("$buildDir/jacoco")
}

//jacoco {
//    toolVersion = "0.7.6.201602180812"
//}

//jacoco {
//    toolVersion = "0.7.5+"
//}

import groovy.io.FileType



def coverageSourceDirs = [
        'app/src/main/java'
]

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.example.ramakrishnakakustham.ccsampletest"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        debug {
            testCoverageEnabled true
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
    test {
        java {
            srcDir 'test/java'
        }
    }
}

//task jacocoTestReport2(type:JacocoReport, dependsOn: ["test"]) {
////    println '##teamcity[jacocoReport dataPath=\'app/build/jacoco/testReleaseUnitTest.exec\' includes=\'com.example.ramakrishnakakustham.ccsampletest.*\' excludes=\'**/R.class **/R$*.class **/*$ViewInjector*.* **/BuildConfig.* **/Manifest*.*\']'
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//}
//
task jacocoTestReport(type:JacocoReport, dependsOn: ['testReleaseUnitTest']) {
    group = "Reporting"
    println("---rk---")
//    println(System.getProperty("user.dir"))
    onlyIf = {
        true
    }
    description = "Generate Jacoco coverage reports for staging debug"
    //jacocoClasspath = project.configurations['androidJacocoAnt']
    classDirectories = fileTree(
            dir: 'app/build/intermediates/classes/release/com',
            excludes: []
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testReleaseUnitTest.exec")
//
//
////    println '##teamcity[jacocoReport dataPath=\'build/jacoco/testReleaseUnitTest.exec\' includes=\'com.example.ramakrishnakakustham.ccsampletest.*\' excludes=\'**/R.class **/R$*.class **/*$ViewInjector*.* **/BuildConfig.* **/Manifest*.*\']'
////    println '##teamcity[jacocoReport dataPath=\'/Users/ramakrishnakakustham/Downloads/buildAgent/work/eb94917032b0493c/app/build/reports/jacoco/testDebugUnitTestCoverage/JacocoReleaseReport.xml\' ]'
    println '##teamcity[jacocoReport dataPath=\'app/build/jacoco/testReleaseUnitTest.exec\' includes=\'com.example.ramakrishnakakustham.ccsampletest.*\' excludes=\'**/R.class **/R$*.class **/*$ViewInjector*.* **/BuildConfig.* **/Manifest*.*\']'
////    println '##teamcity[jacocoReport dataPath=\'/Users/ramakrishnakakustham/TCTestProjs/rkTest/app/build/jacoco/testReleaseUnitTest.exec\' ]'

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}
//
//task jacocoResults(type: JacocoReport, dependsOn: ['test']) {
//    description = "Generates Jacoco coverage reports: XML and HTML"
//    group = "Reporting"
//
//    // use hidden configuration, for details look into JacocoPlugin.groovy
//    jacocoClasspath = project.configurations['jacocoAgent']
//
//    classDirectories = files(fileTree(dir: 'build/intermediates/classes/release', excludes: [
//            '*/R.class', '*/R$.class', '*/BuildConfig.', '*/Manifest*.*']))
//
//    sourceDirectories = files(['src/main/java'])
//    executionData = fileTree(dir: rootProject.rootDir, includes: ['*.exec', '*.ec'])
//    println '##teamcity[jacocoReport dataPath=\'app/build/jacoco/testReleaseUnitTest.exec\' includes=\'com.example.ramakrishnakakustham.ccsampletest.*\' excludes=\'**/R.class **/R$*.class **/*$ViewInjector*.* **/BuildConfig.* **/Manifest*.*\']'
//    reports {
//        html.enabled = true
//        xml.enabled = true
//        csv.enabled = false
//    }
//}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}


